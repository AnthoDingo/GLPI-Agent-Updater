; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "GLPI Agent Updater"
#define MyAppUnderLineName "GLPI_Agent_Updater"
#define MyAppVersion "0.1.3"
#define MyAppPublisher "AnthoDingo"
#define MyAppURL "https://github.com/AnthoDingo/GLPI-Agent-Updater"
#define MyAppExeName "GLPI-Agent-Updater.exe"

#include "CodeDependencies.iss"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{74D246EC-A677-4904-97EA-A190D8823C1F}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={commonpf}\{#MyAppName}
DisableDirPage=yes
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=..\LICENSE
OutputDir=.\bin

UninstallDisplayName={#MyAppName} {#MyAppVersion}


OutputBaseFilename={#MyAppUnderLineName}_{#MyAppVersion}_x64
Compression=lzma2
SolidCompression=no

; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
PrivilegesRequired=admin

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: ".\src\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\src\dotnet-runtime-8.0.18-win-x64.exe"; Flags: dontcopy noencryption
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: none; Flags: createvalueifdoesntexist uninsdeletekey
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: dword; ValueName: "Mode"; ValueData: "{code:GetMode|}"; Flags: createvalueifdoesntexist
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: string; ValueName: "Version"; ValueData: "{code:GetVersion|}"; Flags: createvalueifdoesntexist
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: string; ValueName: "Server"; ValueData: "{code:GetServer|}"; Flags: createvalueifdoesntexist
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: dword; ValueName: "CheckInterval"; ValueData: "120"; Flags: createvalueifdoesntexist

[Code]
var
  SourcePage: TWizardPage;
  GithubButton: TNewRadioButton;
  ServerButton: TNewRadioButton;
  GlpiButton: TNewRadioButton;
  ServerAddress: TEdit;
  VersionPage: TWizardPage;
  VersionEdit: TEdit;
  ResultInstallCode: Integer;
  ResultUninstallCode: Integer;
  ModeParam: String;
  PathParam: String;
  VersionParam: String;

procedure RadioButtonClick(Sender: TObject);
begin
  ServerAddress.Visible := ServerButton.Checked; // Active le champ de saisie si 'Server' est s�lectionn�
end;

function GetCommandLineParam(Param: String): String;
var
  i: Integer;
  ParamName, ParamValue: String;
begin
  Result := '';
  ParamName := '/' + Param + '=';

  for i := 1 to ParamCount do
  begin
    if Pos(ParamName, ParamStr(i)) = 1 then
    begin
      ParamValue := Copy(ParamStr(i), Length(ParamName) + 1, MaxInt);
      Result := ParamValue;
      Exit;
    end;
  end;
end;

function GetVersion(Param: String): String;
begin
  VersionParam := GetCommandLineParam('VERSION');

  if VersionParam <> '' then
  begin
    Result := VersionParam;
  end
  else if VersionEdit.Text = '' then
  begin
    Result := 'Latest'
  end
  else
  begin
    Result := VersionEdit.Text
  end ;
end;


procedure InitializeWizard;
begin
  SourcePage := CreateCustomPage(wpLicense, 'Source', 'Please select source');

  GithubButton := TNewRadioButton.Create(SourcePage);
  GithubButton.Parent := SourcePage.Surface;
  GithubButton.Top := 8;
  GithubButton.Left := 8;
  GithubButton.Caption := 'Github';
  GithubButton.OnClick := @RadioButtonClick;
  
  ServerButton := TNewRadioButton.Create(SourcePage);
  ServerButton.Parent := SourcePage.Surface;
  ServerButton.Top := GithubButton.Top + GithubButton.Height + 8;
  ServerButton.Left := 8;
  ServerButton.Caption := 'Share Server';
  ServerButton.OnClick := @RadioButtonClick;

  GlpiButton := TNewRadioButton.Create(SourcePage);
  GlpiButton.Parent := SourcePage.Surface;
  GlpiButton.Top := ServerButton.Top + ServerButton.Height + 8;
  GlpiButton.Left := 8;
  GlpiButton.Caption := 'GLPI Server';
  GlpiButton.OnClick := @RadioButtonClick;
  GlpiButton.Visible := False;
  
  ServerAddress := TEdit.Create(SourcePage);
  ServerAddress.Parent := SourcePage.Surface;
  ServerAddress.Top := GlpiButton.Top + GlpiButton.Height + 8;
  ServerAddress.Left := 8;
  ServerAddress.Width := SourcePage.SurfaceWidth - 16; // Ajuste la largeur du champ de saisie � la largeur de la page
  ServerAddress.Visible := False;
  
  // Création de la nouvelle page personnalisée
  VersionPage := CreateCustomPage(wpSelectDir, 'Version', 'Please specify target version');

  VersionEdit := TEdit.Create(VersionPage);
  VersionEdit.Parent := VersionPage.Surface;
  VersionEdit.Top := 8;
  VersionEdit.Left := 8;
  VersionEdit.Width := VersionPage.SurfaceWidth - 16;
  VersionEdit.Text := GetVersion('VERSION');
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
     Exec(ExpandConstant('{app}\{#MyAppExeName}'), '/install', ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ResultInstallCode);
  end
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usUninstall then
  begin
    Exec(ExpandConstant('{app}\{#MyAppExeName}'), '/uninstall', ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ResultUninstallCode);
  end;
end;


function GetMode(Param: String): String;
begin  
  ModeParam := GetCommandLineParam('MODE');

  if (GithubButton.Checked) or (ModeParam = '0') then
  begin
     Result := '0';  
  end
  else if (ServerButton.Checked) or (ModeParam = '1') then
  begin
    Result := '1';
  end
  else
  begin
    Result := '2';
  end;
  
end;

function GetServer(Param: String): String;
begin
  PathParam := GetCommandLineParam('PATH');

  if PathParam <> '' then
  begin
    Result := PathParam;
  end
  else
  begin
    Result := ServerAddress.Text
  end ;
end;

function InitializeSetup: Boolean;
begin
  ExtractTemporaryFile('dotnet-runtime-8.0.18-win-x64.exe');
  Dependency_AddDotNet80;

  Result := True;
end;