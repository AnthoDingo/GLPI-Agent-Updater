; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "GLPI Agent Updater"
#define MyAppUnderLineName "GLPI_Agent_Updater"
#define MyAppVersion "0.1"
#define MyAppPublisher "AnthoDingo"
#define MyAppURL "https://github.com/AnthoDingo/GLPI-Agent-Updater"
#define MyAppExeName "GLPI-Agent-Updater.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{74D246EC-A677-4904-97EA-A190D8823C1F}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DisableDirPage=yes
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=..\LICENSE
OutputDir=.\bin
OutputBaseFilename={#MyAppUnderLineName}_{#MyAppVersion}_x64
Compression=lzma
SolidCompression=yes
ArchitecturesInstallIn64BitMode=x64
PrivilegesRequired=admin

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: ".\src\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: none; Flags: createvalueifdoesntexist uninsdeletekey
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: dword; ValueName: "CheckInterval"; ValueData: "60"; Flags: createvalueifdoesntexist
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: dword; ValueName: "Github"; ValueData: "{code:isGithub|}"; Flags: createvalueifdoesntexist
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: dword; ValueName: "GithubDelay"; ValueData: "0"; Flags: createvalueifdoesntexist
Root: "HKLM64"; Subkey: "SOFTWARE\GLPI-Agent-Updater"; ValueType: string; ValueName: "Server"; ValueData: "{code:GetServer|}"; Flags: createvalueifdoesntexist

[Code]
var
  SourcePage: TWizardPage;
  GithubButton: TNewRadioButton;
  ServerButton: TNewRadioButton;
  ServerAddress: TEdit;
  ResultInstallCode: Integer;
  ResultStartCode: Integer;
  ResultUninstallCode: Integer;
  GithubParam: String;
  ServerParam: String;

procedure RadioButtonClick(Sender: TObject);
begin
  ServerAddress.Visible := ServerButton.Checked; // Active le champ de saisie si 'Server' est s�lectionn�
end;

procedure InitializeWizard;
begin
  SourcePage := CreateCustomPage(wpLicense, 'Source', 'Please select source');

  GithubButton := TNewRadioButton.Create(SourcePage);
  GithubButton.Parent := SourcePage.Surface;
  GithubButton.Top := 8;
  GithubButton.Left := 8;
  GithubButton.Caption := 'Github';
  GithubButton.Checked := True; // Par d�faut, 'Github' est s�lectionn�
  GithubButton.OnClick := @RadioButtonClick;
  
  ServerButton := TNewRadioButton.Create(SourcePage);
  ServerButton.Parent := SourcePage.Surface;
  ServerButton.Top := GithubButton.Top + GithubButton.Height + 8;
  ServerButton.Left := 8;
  ServerButton.Caption := 'GLPI Server';
  ServerButton.OnClick := @RadioButtonClick;

  ServerAddress := TEdit.Create(SourcePage);
  ServerAddress.Parent := SourcePage.Surface;
  ServerAddress.Top := ServerButton.Top + ServerButton.Height + 8;
  ServerAddress.Left := 8;
  ServerAddress.Width := SourcePage.SurfaceWidth - 16; // Ajuste la largeur du champ de saisie � la largeur de la page
  ServerAddress.Visible := False;

end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
     Exec(ExpandConstant('{app}\{#MyAppExeName}'), '/install', ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ResultInstallCode);
  end
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usUninstall then
  begin
    Exec(ExpandConstant('{app}\{#MyAppExeName}'), '/uninstall', ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ResultUninstallCode);
  end;
end;


function isGithub(Param: String): String;
begin  
  GithubParam := ExpandConstant('{param:GITHUB|}');
  ServerParam := ExpandConstant('{param:SERVER|}');

  if (GithubButton.Checked) or (GithubParam <> '') then
  begin
     Result := '1';  
  end
  else
  begin
    Result := '0';
  end;

  if ServerParam <> '' then
  begin
    Result := '0';
  end;
end;

function GetServer(Param: String): String;
begin
  ServerParam := ExpandConstant('{param:SERVER|}');

  if ServerParam <> '' then
  begin
    Result := ServerParam;
  end
  else
  begin
    Result := ServerAddress.Text
  end ;

end;